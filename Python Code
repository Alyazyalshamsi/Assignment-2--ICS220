class EBook:
    """Represents an e-book in the bookstore."""
    
    def __init__(self, title, author, publication_date, genre, price):
        """Initializes an e-book with its details."""
        self.title = title
        self.author = author
        self.publication_date = publication_date
        self.genre = genre
        self.price = price
    
    def get_details(self):
        """Returns a dictionary of e-book details."""
        return {
            "Title": self.title,
            "Author": self.author,
            "Publication Date": self.publication_date,
            "Genre": self.genre,
            "Price": self.price
        }

    def __str__(self):
        """Returns a string representation of the e-book."""
        return f"{self.title} by {self.author} - {self.price} USD"

    def set_price(self, new_price):
        """Sets a new price for the e-book."""
        self.price = new_price
    
    def update_details(self, title=None, author=None, publication_date=None, genre=None, price=None):
        """Updates the details of the e-book."""
        if title:
            self.title = title
        if author:
            self.author = author
        if publication_date:
            self.publication_date = publication_date
        if genre:
            self.genre = genre
        if price is not None:
            self.price = price

class Customer:
    """Represents a customer in the bookstore."""
    
    def __init__(self, name, email, phone_number):
        """Initializes a customer with their details."""
        self.name = name
        self.email = email
        self.phone_number = phone_number
        self.is_loyalty_member = False
    
    def get_details(self):
        """Returns customer details."""
        return {
            "Name": self.name,
            "Email": self.email,
            "Phone Number": self.phone_number,
            "Loyalty Member": self.is_loyalty_member
        }
    
    def join_loyalty_program(self):
        """Enrolls the customer into the loyalty program."""
        self.is_loyalty_member = True
    
    def leave_loyalty_program(self):
        """Removes the customer from the loyalty program."""
        self.is_loyalty_member = False

class ShoppingCart:
    """Represents a shopping cart for a customer."""
    
    def __init__(self):
        """Initializes an empty shopping cart."""
        self.items = []
    
    def add_item(self, ebook):
        """Adds an e-book to the shopping cart."""
        if isinstance(ebook, EBook):
            self.items.append(ebook)

    def remove_item(self, ebook):
        """Removes an e-book from the shopping cart."""
        if ebook in self.items:
            self.items.remove(ebook)
    
    def update_quantity(self, ebook, quantity):
        """Updates the quantity of a specific e-book in the cart (simulated by adding/removing)."""
        self.remove_item(ebook)
        for _ in range(quantity):
            self.add_item(ebook)
    
    def get_cart_items(self):
        """Returns a list of all e-books in the cart."""
        return [str(item) for item in self.items]
    
    def calculate_total(self):
        """Calculates the total price of items in the cart."""
        return sum([item.price for item in self.items])


class Discount:
    """Handles discount calculations for loyalty and bulk purchases."""
    
    def __init__(self):
        """Initializes the discount calculation handler."""
        self.discount_percentage = 0
    
    def apply_loyalty_discount(self, customer):
        """Applies a loyalty discount if the customer is a loyalty member."""
        if customer.is_loyalty_member:
            self.discount_percentage = 10
        return self.discount_percentage
    
    def apply_bulk_discount(self, cart):
        """Applies a bulk discount for 5 or more e-books in the cart."""
        if len(cart.items) >= 5:
            self.discount_percentage = max(self.discount_percentage, 20)  # Bulk purchase gets a 20% discount
        return self.discount_percentage

class Order:
    """Represents an order placed by a customer."""
    
    def __init__(self, customer, cart, discount, vat_rate=8):
        """Initializes an order with a customer, cart, and VAT rate."""
        self.customer = customer
        self.cart = cart
        self.discount = discount
        self.vat_rate = vat_rate
        self.total = 0
        self.discount_applied = 0
        self.invoice = ""
    
    def apply_discounts(self):
        """Applies discounts based on loyalty or bulk purchase."""
        loyalty_discount = self.discount.apply_loyalty_discount(self.customer)
        bulk_discount = self.discount.apply_bulk_discount(self.cart)
        self.discount_applied = max(loyalty_discount, bulk_discount)
        self.total = self.cart.calculate_total()
        self.total -= self.total * (self.discount_applied / 100)
    
    def calculate_vat(self):
        """Calculates the VAT for the order."""
        return self.total * (self.vat_rate / 100)
    
    def generate_invoice(self):
        """Generates the invoice for the order."""
        vat = self.calculate_vat()
        final_amount = self.total + vat
        self.invoice = (
            f"Invoice:\n"
            f"Customer: {self.customer.name}\n"
            f"Items: {', '.join(self.cart.get_cart_items())}\n"
            f"Subtotal: {self.total:.2f} USD\n"
            f"Discount Applied: {self.discount_applied}%\n"
            f"VAT ({self.vat_rate}%): {vat:.2f} USD\n"
            f"Total: {final_amount:.2f} USD\n"
            f"\n"  # Adding a newline here for space
            f"-------------------------------\n"
            f"Thank you for shopping with us!"
        )
        return self.invoice

class Invoice:
    """Handles invoice generation and printing."""
    
    def __init__(self, order):
        """Initializes an invoice with the order details."""
        self.order = order
    
    def print_invoice(self):
        """Prints the invoice for the given order."""
        print(self.order.generate_invoice())


# Test Case 1: Customer Not in Loyalty Program (Regular Purchase)
def test_regular_purchase():
    """Test a regular purchase with no loyalty program or bulk discount."""
    ebook1 = EBook("It Ends With Us", "Colleen Hoover", "2022-01-01", "Romance", 20)
    ebook2 = EBook("Wonder", "Rj Palacio", "2023-05-01", "Novel", 25)
    
    customer = Customer("Alyazya", "Alyazya@sample.com", "123456789")
    cart = ShoppingCart()
    cart.add_item(ebook1)
    cart.add_item(ebook2)
    
    discount = Discount()  # Initialize Discount instance
    order = Order(customer, cart, discount)  # Pass discount instance
    order.apply_discounts()
    invoice = order.generate_invoice()
    
    print("Test Case: Regular Purchase (No Loyalty Program)")
    print(invoice)
    print(f"-------------------------------\n")


